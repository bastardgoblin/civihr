<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2016                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2016
 *
 * Generated from xml/schema/CRM/HRLeaveAndAbsences/LeaveBalance.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
class CRM_HRLeaveAndAbsences_DAO_LeaveBalance extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   */
  static $_tableName = 'civicrm_hrleaveandabsences_leave_balance';
  /**
   * static instance to hold the field values
   *
   * @var array
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Unique Leave Balance ID
   *
   * @var int unsigned
   */
  public $id;
  /**
   * FK to AbsencePeriod
   *
   * @var int unsigned
   */
  public $period_id;
  /**
   * FK to AbsenceType
   *
   * @var int unsigned
   */
  public $type_id;
  /**
   * FK to HRJobContract
   *
   * @var int unsigned
   */
  public $contract_id;
  /**
   * Indicates if this balance's entitlement was overridden
   *
   * @var boolean
   */
  public $overridden;
  /**
   * The comment added by the user about the calculation for this balance's entitlement
   *
   * @var text
   */
  public $comment;
  /**
   * FK to Contact. The contact that represents the user who added the comment to this balance's entitlement
   *
   * @var int unsigned
   */
  public $comment_author_id;
  /**
   * The date and time the comment for this balance's entitlement was added/updated
   *
   * @var datetime
   */
  public $comment_date;
  /**
   * class constructor
   *
   * @return civicrm_hrleaveandabsences_leave_balance
   */
  function __construct()
  {
    $this->__table = 'civicrm_hrleaveandabsences_leave_balance';
    parent::__construct();
  }
  /**
   * Returns foreign keys and entity references
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  static function getReferenceColumns()
  {
    if (!self::$_links) {
      self::$_links = static ::createReferenceColumns(__CLASS__);
      self::$_links[] = new CRM_Core_Reference_Basic(self::getTableName() , 'period_id', 'civicrm_hrleaveandabsences_absence_period', 'id');
      self::$_links[] = new CRM_Core_Reference_Basic(self::getTableName() , 'type_id', 'civicrm_hrleaveandabsences_absence_type', 'id');
      self::$_links[] = new CRM_Core_Reference_Basic(self::getTableName() , 'comment_author_id', 'civicrm_contact', 'id');
    }
    return self::$_links;
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Unique Leave Balance ID',
          'required' => true,
        ) ,
        'period_id' => array(
          'name' => 'period_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'FK to AbsencePeriod',
          'required' => true,
          'FKClassName' => 'CRM_HRLeaveAndAbsences_DAO_AbsencePeriod',
        ) ,
        'type_id' => array(
          'name' => 'type_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'FK to AbsenceType',
          'required' => true,
          'FKClassName' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
        ) ,
        'contract_id' => array(
          'name' => 'contract_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'FK to HRJobContract',
          'required' => true,
        ) ,
        'overridden' => array(
          'name' => 'overridden',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Overridden') ,
          'description' => 'Indicates if this balance\'s entitlement was overridden',
          'default' => 'false',
        ) ,
        'comment' => array(
          'name' => 'comment',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Comment') ,
          'description' => 'The comment added by the user about the calculation for this balance\'s entitlement',
        ) ,
        'comment_author_id' => array(
          'name' => 'comment_author_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'FK to Contact. The contact that represents the user who added the comment to this balance\'s entitlement',
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ) ,
        'comment_date' => array(
          'name' => 'comment_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Comment Date') ,
          'description' => 'The date and time the comment for this balance\'s entitlement was added/updated',
        ) ,
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'id' => 'id',
        'period_id' => 'period_id',
        'type_id' => 'type_id',
        'contract_id' => 'contract_id',
        'overridden' => 'overridden',
        'comment' => 'comment',
        'comment_author_id' => 'comment_author_id',
        'comment_date' => 'comment_date',
      );
    }
    return self::$_fieldKeys;
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import['hrleaveandabsences_leave_balance'] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export['hrleaveandabsences_leave_balance'] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}
